#!/usr/bin/env ruby

require 'readline'
require 'io/console'
require 'socket'
require_relative "lib/prettyprint"
require_relative "lib/shellprocess"
require_relative "scripting/initializescripts"

pp = PrettyPrint.new

#banner
kiss_prompt  = pp.color("K", :pink) + "eep"   +   pp.color("              .. ..\n", :pink)
kiss_prompt += pp.color("I", :pink) + "t"     + pp.color("              .'  `  `.\n", :pink)
kiss_prompt += pp.color("S", :pink) + "imple" +     pp.color("        .'_.-...-._`.\n", :pink)
kiss_prompt += pp.color("S", :pink) + "tupid" +     pp.color("         `.       .'\n", :pink)
kiss_prompt += pp.color("smoochbot", :pink)   +        pp.color("        `-...-'", :pink)
puts kiss_prompt
#startup scripts to run on 
startup_scripts = create_startup_scripts
pp.print_info("Loaded #{startup_scripts.length} startup scripts\n") if startup_scripts.length > 1
pp.print_info("Loaded #{startup_scripts.length} startup scripts\n") if startup_scripts.length == 1
pp.print_info("Loaded #{startup_scripts.length} startup scripts\n") if startup_scripts.length == 0
#startup regular use scripts
shell_scripts = create_shell_scripts
pp.print_info("Loaded #{shell_scripts.length} shell scripts\n") if shell_scripts.length > 1
pp.print_info("Loaded #{shell_scripts.length} shell scripts\n") if shell_scripts.length == 1
pp.print_info("Loaded #{shell_scripts.length} shell scripts\n") if shell_scripts.length == 0

#load history
=begin
hist_file = nil
filename = __dir__ + "/.smoochbot_history"
if File.exist?(filename) then
  #open history file, load into buffer
  File.open(filename).each_line do |line|
    #p Readline::HISTORY
    #p Readline::HISTORY.methods

    Readline::HISTORY.push "fileload"
    print "added cmd: "
    p line.chomp
  end
  hist_file = File.open(filename, "a")
else
  #create history file
  hist_file = File.open(filename, "a")
  pp.puts(
           "History file created at #{filename}",
           :yellow
          )
end
hist_file.sync = true
=end

#initialize shell
port = ARGV[0].to_i
remote_shell = ShellProcess.new(port, pp)
#identify prompt
remote_shell.suppress_shell_prompt
#run startup scripts
startup_scripts.each do |script|
  script.run_script(remote_shell, pp)
end

=begin
#tab complete
Readline.completion_proc = proc do |s|
  directory_list = Dir.glob("#{s}*")
  if directory_list.size > 0
    directory_list
  else
    Readline::HISTORY.grep(/^#{Regexp.escape(s)}/)
  end
end
=end

print "sb "
#bug with readline workaround
while input = Readline.readline(" \b", true)
  #Remove blank lines from history
  Readline::HISTORY.pop       if input == ""
  case input
  #when "\\exit"
    #remote_shell.close
  when "hist"
    Readline::HISTORY.pop
    puts Readline::HISTORY.to_a
    print "sb "
  else
    #check for script keywords
    ran_script = false
    first_word, rest_of_line = input.split(" ", 2)
    shell_scripts.each do |script|
      if first_word == script.keyword then
        ran_script = true
        script.run_script(remote_shell, pp, rest_of_line)
        print "sb "
      end
    end
    remote_shell.input(input)   unless ran_script
    #hist_file.puts input
  end
end

#all code for smoochbot is written with the assumption 
#that these commands are available to you
#any scenario where these aren't (rbash, etc...) is not accounted for
#as of yet. feel free to submit suggestions/pull requests, I'd be happy
#to expand/fix smoochbot
#all scripts that use commands outside of this search for them before 
#beginning, and abort with appropriate error messages if they can't run
#IMPORTANT TODO - as of now, I also use the command which
#This isn't guaranteed to be available, so a standalone bash script
#To do the job MUST be implemented for the above assumptions to hold
##########################################################################
#bash  defines  the  following built-in commands: :, ., [, alias, bg, bind,
#break, builtin, case, cd, command, compgen, complete, continue, declare, 
#dirs, disown, echo, enable, eval, #exec,  exit,  export,  fc,  fg,  
#getopts, hash, help, history, if, jobs, kill, let, local, logout, popd, 
#printf, pushd, pwd, read,  readonly,  return,  set,  shift,  shopt,  
#source, suspend,  test,  times,  trap,  type, typeset, ulimit, umask, 
#unalias, unset, until, wait, while
##########################################################################